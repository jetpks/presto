#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#
#
#

###
# detect macOS
function on_mac() {
  [[ $(uname) == "Darwin" ]]
}

###
# ls modifications
# BEFORE prezto
local ls_args='-alhF --color --group-directories-first'
if [[ -e "/usr/local/opt/coreutils/libexec/gnubin/ls" ]]; then
  alias ll="/usr/local/opt/coreutils/libexec/gnubin/ls ${ls_args}"
  alias ls="/usr/local/opt/coreutils/libexec/gnubin/ls"
else
  alias ll="ls ${ls_args}"
fi

###
# zprezto
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

###
# envs
export EDITOR=vim

###
# aliases
alias copyssh="pbcopy < $HOME/.ssh/hexagon.pub"
alias reloadcli="source $HOME/.zshrc"
alias flushdns="dscacheutil -flushcache && sudo killall -HUP mDNSResponder"
alias lock="open /System/Library/CoreServices/ScreenSaverEngine.app"
alias be='bundle exec'
alias beerspec='be rspec'

###
# ls modifications
# TODO Why is this here twice?
local ls_args='-alhF --color --group-directories-first'
if [[ -e "/usr/local/opt/coreutils/libexec/gnubin/ls" ]]; then
  alias ll="/usr/local/opt/coreutils/libexec/gnubin/ls ${ls_args}"
  alias ls="/usr/local/opt/coreutils/libexec/gnubin/ls"
else
  alias ll="ls ${ls_args}"
fi

###
# path modifications
#
# local bin directories first
# path modifications
# local/bin first, home/bin last
export PATH="/usr/local/bin:/usr/local/sbin:$PATH:${HOME}/bin"

###
# shell opts
# make ^U kill from the cursor to the beginning of the line
setopt bsd_echo
bindkey \^U backward-kill-line
set -k
# don't warn about overwriting files with redirection
set -o clobber

###
# notes
noteloc=${HOME}/ic/Documents/instructure/notes/
function note {
  local notefile="${noteloc}/$(pdate).md"
  local notedir=$(dirname $notefile)
  [ -d $notedir ] || mkdir $notedir
  subl $notefile
}

###
# ruby
# chruby to ruby-2.6.6 by default
on_mac && chruby ruby-2.6.6

###
# golang
export GOPATH=${HOME}
export GO111MODULE=on

###
# time
function utc {
  TZ=UTC date
}

###
# vaulted & rapture
vrefresh() {
  if [ -z "${VAULTED_ENV}" ]; then
    echo -n '>> No vaulted env set, use `vaulted shell <vault>` where vault is one of:'
    vaulted list
    return false
  fi

  echo ">> Refreshing ${VAULTED_ENV}"
  eval $(vaulted env "${VAULTED_ENV}")
}

[[ -e ${HOME}/bin/rapture ]] && eval "$( command rapture shell-init )"

###
# node.js
export NVM_DIR="$HOME/.nvm"
#. "/usr/local/opt/nvm/nvm.sh"
export PATH="/usr/local/opt/postgresql@9.6/bin:$PATH"

###
# python3
export PATH="/usr/local/opt/python/libexec/bin:$PATH"
export PATH="/Users/ejacobs/Library/Python/3.7/bin:$PATH"

###
# vault
export VAULT_ADDR=https://vault.insops.net

###
# bat
export BAT_THEME="Monokai Extended Bright"

###
# zsh completions
fpath=(/usr/local/share/zsh-completions $fpath)

###
# local RCs
for local_rc in ${HOME}/.zprezto/.local/*; do
  source "${local_rc}"
done

###
# krew
[[ -d "${HOME}/.krew/bin" ]] && export PATH="${PATH}:${HOME}/.krew/bin"

###
# body
#
# print the header (the first line of input)
# and then run the specified command on the body (the rest of the input)
# use it in a pipeline, e.g. ps | body grep somepattern
# https://unix.stackexchange.com/questions/11856/sort-but-keep-header-line-at-the-top
body() {
    IFS= read -r header
    printf '%s\n' "$header"
    "$@"
}

###
# gpg tty
export GPG_TTY=`tty`

